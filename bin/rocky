#!/usr/bin/env node

var fs      = require('fs')
var toml    = require('toml')
var assign  = require('lodash').assign
var findup  = require('findup-sync')
var version = require('../package.json').version

var configFile = 'rocky.toml'

var argv = require('yargs')
  .usage('Start rocky HTTP proxy server\nUsage: $0 [options]')
  .example('$0 -c rocky.toml \\\n -f http://127.0.0.1:9000 \\\n -r http://127.0.0.1', '')
  .help('help')
  .alias('help', 'h')
  .version(version)
  .alias('v', 'version')
  .options({
    config: {
      alias: 'c',
      description: 'File path to TOML config file'
    },
    port: {
      alias: 'p',
      description: 'rocky HTTP server port',
    },
    forward: {
      alias: 'f',
      description: 'Default forward server URL'
    },
    replay: {
      alias: 'r',
      description: 'Define a replay server URL'
    },
    key: {
      alias: 'k',
      description: 'Path to SSL key file'
    },
    cert: {
      alias: 'e',
      description: 'Path to SSL certificate file'
    },
    secure: {
      alias: 's',
      description: 'Enable SSL certification validation',
      type: 'boolen'
    },
    balance: {
      alias: 'b',
      description: 'Define server URLs to balance between, separated by commas',
    },
    debug: {
      alias: 'd',
      description: 'Enable debug mode',
      type: 'boolean'
    }
  })
  .argv

var data = ''
var id = setTimeout(start, 100)

process.stdin.resume()
process.stdin.setEncoding('utf8')
process.stdin.on('data', function (chunk) {
  data += chunk
})
process.stdin.once('end', function () {
  clearTimeout(id)
  start()
})

function start() {
  process.stdin.pause()

  if (!data && process.env.ROCKY_CONFIG) {
    argv.config = process.env.ROCKY_CONFIG
  }

  if (!data && argv.config && !fs.existsSync(argv.config)) {
    console.error('Invalid config path:', argv.config)
    process.exitCode = 1
    return
  }

  if (!data && !argv.config) {
    argv.config = findup(configFile, { cwd: process.cwd() })
  }

  if (!data && argv.config) {
    data = fs.readFileSync(argv.config).toString()
  }

  if (!data) {
    console.error('Cannot find rocky.toml config file')
    process.exitCode = 1
    return
  }

  var config = toml.parse(data)
  var opts = assign({}, argv, config)

  startProxy(opts)
  console.log('rocky server listening on port:', opts.port)
}

function startProxy(opts) {
  if (opts.cert && opts.key) {
    opts.ssl = {
      cert: fs.readFileSync(opts.cert, 'utf8'),
      key: fs.readFileSync(opts.key, 'utf8')
    }
  }

  if (opts.debug) {
    process.env.DEBUG = 'rocky:*'
  }

  opts.port = +opts.port || process.env.PORT ||Â 3000
  require('..').create(opts)
}
